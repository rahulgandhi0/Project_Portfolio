import csv
import requests

class Graph:
    """
    Represents a graph structure with nodes and edges.
    Nodes represent actors, and edges represent co-actor relationships.
    """

    def __init__(self, with_nodes_file=None, with_edges_file=None):
        """
        Initialize the Graph with optional node and edge CSV files.
        If files are provided, load their contents into the graph.
        """
        self.nodes = []
        self.edges = []

        if with_nodes_file and with_edges_file:
            # Load nodes from CSV
            with open(with_nodes_file, 'r') as file:
                nodes_csv = csv.reader(file)
                self.nodes = [(row[0], row[1]) for row in list(nodes_csv)[1:]]

            # Load edges from CSV
            with open(with_edges_file, 'r') as file:
                edges_csv = csv.reader(file)
                self.edges = [(row[0], row[1]) for row in list(edges_csv)[1:]]

    def add_node(self, id: str, name: str) -> None:
        """
        Add a node to the graph if it does not already exist.
        """
        clean_name = name.replace(",", "")
        if (id, clean_name) not in self.nodes:
            self.nodes.append((id, clean_name))

    def add_edge(self, source: str, target: str) -> None:
        """
        Add an edge between two nodes if it does not already exist.
        """
        edge = tuple(sorted([source, target]))
        if edge not in self.edges:
            self.edges.append(edge)

    def total_nodes(self) -> int:
        """
        Returns the total number of nodes in the graph.
        """
        return len(self.nodes)

    def total_edges(self) -> int:
        """
        Returns the total number of edges in the graph.
        """
        return len(self.edges)

    def max_degree_nodes(self) -> dict:
        """
        Returns the nodes with the highest degree (most connections).
        If there are ties, all nodes with the max degree are included.
        """
        degree_count = {}
        for source, target in self.edges:
            degree_count[source] = degree_count.get(source, 0) + 1
            degree_count[target] = degree_count.get(target, 0) + 1

        max_degree = max(degree_count.values(), default=0)
        return {node: degree for node, degree in degree_count.items() if degree == max_degree}

    def write_edges_file(self, path="edges.csv") -> None:
        """
        Write all edges to a CSV file.
        """
        with open(path, 'w', encoding='utf-8') as file:
            file.write("source,target\n")
            for edge in self.edges:
                file.write(f"{edge[0]},{edge[1]}\n")
        print("Finished writing edges to CSV.")

    def write_nodes_file(self, path="nodes.csv") -> None:
        """
        Write all nodes to a CSV file.
        """
        with open(path, 'w', encoding='utf-8') as file:
            file.write("id,name\n")
            for node in self.nodes:
                file.write(f"{node[0]},{node[1]}\n")
        print("Finished writing nodes to CSV.")


class TMDBAPIUtils:
    """
    A utility class for interacting with the TMDB API.
    """

    def __init__(self, api_key: str):
        self.api_key = api_key

    def get_movie_cast(self, movie_id: str, limit: int = None, exclude_ids: list[int] = None) -> list:
        """
        Retrieve the cast of a movie, with options to exclude specific IDs and limit the results.
        """
        url = f"https://api.themoviedb.org/3/movie/{movie_id}/credits"
        params = {"api_key": self.api_key, "language": "en-US"}
        response = requests.get(url, params=params)

        if response.status_code != 200:
            response.raise_for_status()

        data = response.json()
        cast_list = data.get("cast", [])

        if exclude_ids:
            cast_list = [cast for cast in cast_list if cast["id"] not in exclude_ids]

        cast_list.sort(key=lambda cast: cast.get("order", float('inf')))

        if limit is not None:
            cast_list = [cast for cast in cast_list if cast.get("order", float('inf')) < limit]

        return [
            {"id": str(cast["id"]), "character": cast.get("character", ""), "credit_id": cast.get("credit_id", "")}
            for cast in cast_list
        ]

    def get_movie_credits_for_person(self, person_id: str, start_date: str = None, end_date: str = None) -> list:
        """
        Retrieve movie credits for a specific person within an optional date range.
        """
        url = f"https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        params = {"api_key": self.api_key, "language": "en-US"}
        response = requests.get(url, params=params)

        if response.status_code != 200:
            response.raise_for_status()

        data = response.json()
        cast_credits = data.get("cast", [])

        filtered_credits = []
        for credit in cast_credits:
            release_date = credit.get("release_date", "")
            if start_date and release_date < start_date:
                continue
            if end_date and release_date > end_date:
                continue
            filtered_credits.append({"id": credit.get("id"), "title": credit.get("title"), "release_date": release_date})

        return filtered_credits


def return_name() -> str:
    """
    Return the GT username.
    """
    return "rgandhi48"


if __name__ == "__main__":
    graph = Graph()
    graph.add_node(id="2975", name="Laurence Fishburne")
    tmdb_api_utils = TMDBAPIUtils(api_key="c63e3efd4dbca3ec59b43eb3c4604387")

    # Initialize the graph for Laurence Fishburne
    base_nodes = []
    try:
        movies = tmdb_api_utils.get_movie_credits_for_person("2975", "1999-01-01", "1999-12-31")
        for movie in movies:
            movie_id = movie["id"]
            co_actors = tmdb_api_utils.get_movie_cast(movie_id, limit=5, exclude_ids=[2975])
            for co_actor in co_actors:
                co_actor_id, co_actor_name = str(co_actor["id"]), co_actor["character"]
                graph.add_node(co_actor_id, co_actor_name)
                graph.add_edge("2975", co_actor_id)
                base_nodes.append(co_actor_id)
    except Exception as e:
        print(f"Error during graph initialization: {e}")

    # Expand graph with two iterations
    current_nodes = base_nodes
    for _ in range(2):
        new_nodes = []
        for node_id in current_nodes:
            try:
                movies = tmdb_api_utils.get_movie_credits_for_person(node_id, "1999-01-01", "1999-12-31")
                for movie in movies:
                    movie_id = movie["id"]
                    co_actors = tmdb_api_utils.get_movie_cast(movie_id, limit=5, exclude_ids=[int(node_id)])
                    for co_actor in co_actors:
                        co_actor_id, co_actor_name = str(co_actor["id"]), co_actor["character"]
                        graph.add_node(co_actor_id, co_actor_name)
                        graph.add_edge(node_id, co_actor_id)
                        if co_actor_id not in new_nodes and co_actor_id not in current_nodes:
                            new_nodes.append(co_actor_id)
            except Exception as e:
                print(f"Error during graph expansion: {e}")
        current_nodes = new_nodes

    # Write graph to CSV
    graph.write_edges_file()
    graph.write_nodes_file()

    print("Graph construction complete.")


######################################### SQLite Addition #########################################

import sqlite3
from sqlite3 import Error
import csv

class HW2_sql():
    def create_connection(self, path):
        connection = None
        try:
            connection = sqlite3.connect(path)
            connection.text_factory = str
        except Error as e:
            print("Error occurred: " + str(e))
    
        return connection

    def execute_query(self, connection, query):
        cursor = connection.cursor()
        try:
            if query == "":
                return "Query Blank"
            else:
                cursor.execute(query)
                connection.commit()
                return "Query executed successfully"
        except Error as e:
            return "Error occurred: " + str(e)
    
    # Part 1.a.i Create Tables [2 points]
    def part_1_a_i(self,connection):
        part_1_a_i_sql = """
        CREATE TABLE IF NOT EXISTS movies (
            id INTEGER,
            title TEXT,
            score REAL
        );
        """  
        return self.execute_query(connection, part_1_a_i_sql)

    def part_1_a_ii(self,connection):
        part_1_a_ii_sql = """
        CREATE TABLE IF NOT EXISTS movie_cast (
            movie_id INTEGER,
            cast_id INTEGER,
            cast_name TEXT,
            birthday TEXT,
            popularity REAL
        );
        """
        return self.execute_query(connection, part_1_a_ii_sql)
    
    # Part 1.b Import Data [2 points]
    def part_1_b_movies(self,connection,path):
        with open(path, 'r') as file:
            reader = csv.reader(file)
            sql = "INSERT INTO movies (id, title, score) VALUES (?, ?, ?);"
            for row in reader:
                connection.execute(sql, row)
        connection.commit()
        
        sql = "SELECT COUNT(id) FROM movies;"
        cursor = connection.execute(sql)
        return cursor.fetchall()[0][0]
    
    def part_1_b_movie_cast(self,connection, path):
        with open(path, 'r') as file:
            reader = csv.reader(file)
            
            sql = """
            INSERT INTO movie_cast (movie_id, cast_id, cast_name, birthday, popularity)
            VALUES (?, ?, ?, ?, ?);
            """
            for row in reader:
                connection.execute(sql, row)
                
        connection.commit()
        
        sql = "SELECT COUNT(cast_id) FROM movie_cast;"
        cursor = connection.execute(sql)
        return cursor.fetchall()[0][0]

    # Part 1.c Vertical Database Partitioning [5 points]
    def part_1_c(self,connection):
        part_1_c_sql = """CREATE TABLE IF NOT EXISTS cast_bio (
            cast_id INTEGER PRIMARY KEY, 
            cast_name TEXT,
            birthday TEXT, 
            popularity REAL
            ); 
            """
        
        self.execute_query(connection, part_1_c_sql)

        part_1_c_insert_sql = """
        INSERT INTO cast_bio (cast_id, cast_name, birthday, popularity)
        SELECT DISTINCT cast_id, cast_name, birthday, popularity 
        FROM movie_cast;
        """
   
        self.execute_query(connection, part_1_c_insert_sql)
        
        sql = "SELECT COUNT(cast_id) FROM cast_bio;"
        cursor = connection.execute(sql)
        return cursor.fetchall()[0][0]

    # Part 2 Create Indexes [1 points]
    def part_2_a(self,connection):
        part_2_a_sql = """
        CREATE INDEX IF NOT EXISTS movie_index ON movies (id);
        """
        return self.execute_query(connection, part_2_a_sql)
    
    def part_2_b(self,connection):
        part_2_b_sql = """
        CREATE INDEX IF NOT EXISTS cast_index ON movie_cast (cast_id);
        """
        return self.execute_query(connection, part_2_b_sql)
    
    def part_2_c(self,connection):
        part_2_c_sql = """
        CREATE INDEX IF NOT EXISTS cast_bio_index ON cast_bio (cast_id);
        """
        return self.execute_query(connection, part_2_c_sql)
    
    # Part 3 Calculate a Proportion [3 points]
    def part_3(self,connection):
        part_3_sql = """
        SELECT 
            printf('%.2f', 100.0 * (
                (SELECT COUNT(*) FROM movies WHERE score BETWEEN 7 AND 20) * 1.0 /
                (SELECT COUNT(*) FROM movies)
            )) AS proportion_percentage;
        """
        cursor = connection.execute(part_3_sql)
        return cursor.fetchall()[0][0]

    # Part 4 Find the Most Prolific Actors [4 points]
    def part_4(self,connection):
        part_4_sql = """
        SELECT cast_name, COUNT(*) AS appearance_count
        FROM movie_cast
        WHERE popularity > 10
        GROUP BY cast_name
        ORDER BY appearance_count DESC, cast_name ASC
        LIMIT 5;
        """
        cursor = connection.execute(part_4_sql)
        return cursor.fetchall()

    # Part 5 Find the Highest Scoring Movies With the Least Amount of Cast [4 points]
    def part_5(self,connection):
        part_5_sql = """
        SELECT 
            movies.title AS movie_title, 
            printf('%.2f', movies.score) AS score, 
            COUNT(movie_cast.cast_id) AS cast_count
        
        FROM movies
        INNER JOIN movie_cast
        ON movies.id = movie_cast.movie_id
        GROUP BY movies.id, movies.title, movies.score
        ORDER BY
            movies.score DESC,
            cast_count ASC, 
            movies.title ASC
        
        LIMIT 5; 
        """
        cursor = connection.execute(part_5_sql)
        return cursor.fetchall()
    
    # Part 6 Get High Scoring Actors [4 points]
    def part_6(self,connection):
        part_6_sql = """
        SELECT
            movie_cast.cast_id AS cast_id, 
            movie_cast.cast_name AS cast_name, 
            printf('%.2f', AVG(movies.score)) AS average_score
        
        FROM movies
        INNER JOIN movie_cast
        ON movies.id = movie_cast.movie_id
        WHERE movies.score >= 25
        GROUP BY  movie_cast.cast_id, movie_cast.cast_name
        HAVING COUNT(movies.id) >= 3
        ORDER BY  average_score DESC, cast_name ASC
        LIMIT 10;
        """
        cursor = connection.execute(part_6_sql)
        return cursor.fetchall()

    # Part 7 Creating Views [6 points]
    def part_7(self,connection):
        part_7_sql = """
        CREATE VIEW good_collaboration AS
        SELECT
            actor1.cast_id AS cast_member_id1,
            actor2.cast_id AS cast_member_id2,
            COUNT(DISTINCT movies.id) AS movie_count,
            AVG(movies.score) AS average_movie_score
        FROM movie_cast AS actor1
        INNER JOIN movie_cast AS actor2
            ON actor1.movie_id = actor2.movie_id
        INNER JOIN movies
            ON actor1.movie_id = movies.id
        WHERE actor1.cast_id < actor2.cast_id  -- Ensures no duplicate or self-pair
        GROUP BY actor1.cast_id, actor2.cast_id
        HAVING movie_count >= 2 AND average_movie_score >= 40;
        """
        return self.execute_query(connection, part_7_sql)
    
    def part_8(self,connection):
        part_8_sql = """
        SELECT 
            cast_members.cast_id,
            cast_bio.cast_name,
            printf('%.2f', AVG(gc.average_movie_score)) AS collaboration_score
        FROM (
            SELECT cast_member_id1 AS cast_id FROM good_collaboration
            UNION ALL
            SELECT cast_member_id2 AS cast_id FROM good_collaboration
        ) AS cast_members
        INNER JOIN cast_bio
            ON cast_members.cast_id = cast_bio.cast_id
        INNER JOIN good_collaboration AS gc
            ON cast_members.cast_id = gc.cast_member_id1 OR cast_members.cast_id = gc.cast_member_id2
        GROUP BY 
            cast_members.cast_id, 
            cast_bio.cast_name
        ORDER BY 
            collaboration_score DESC,
            cast_bio.cast_name ASC
        LIMIT 5;  
        """
        cursor = connection.execute(part_8_sql)
        return cursor.fetchall()
    
    # Part 9 FTS [4 points]
    def part_9_a(self,connection,path):
        part_9_a_sql = """
        CREATE VIRTUAL TABLE movie_overview USING fts4 (
            id INTEGER,
            overview TEXT);
        """
        connection.execute(part_9_a_sql)
        import csv
        with open(path, 'r') as file:
            reader = csv.reader(file)  
            for row in reader:
                connection.execute(
                    "INSERT INTO movie_overview (id, overview) VALUES (?, ?);",
                    (row[0], row[1])
                )
        connection.commit()
        sql = "SELECT COUNT(id) FROM movie_overview;"
        cursor = connection.execute(sql)
        return cursor.fetchall()[0][0]
        
    def part_9_b(self,connection):
        part_9_b_sql = """
        SELECT COUNT(id)
        FROM movie_overview
        WHERE overview MATCH "fight";
        """
        cursor = connection.execute(part_9_b_sql)
        return cursor.fetchall()[0][0]
    
    def part_9_c(self,connection):
        part_9_c_sql = """
        SELECT COUNT(id)
        FROM movie_overview
        WHERE overview MATCH 'space NEAR/5 program';
        """
        cursor = connection.execute(part_9_c_sql)
        return cursor.fetchall()[0][0]


if __name__ == "__main__":

    if SHOW == True:
        sample = Sample()
        sample.sample()

    print('\033[32m' + "Q2 Output: " + '\033[m')
    db = HW2_sql()
    try:
        conn = db.create_connection("Q2")
    except:
        print("Database Creation Error")

    try:
        conn.execute("DROP TABLE IF EXISTS movies;")
        conn.execute("DROP TABLE IF EXISTS movie_cast;")
        conn.execute("DROP TABLE IF EXISTS cast_bio;")
        conn.execute("DROP VIEW IF EXISTS good_collaboration;")
        conn.execute("DROP TABLE IF EXISTS movie_overview;")
    except Exception as e:
        print("Error in Table Drops")
        print(e)

    try:
        print('\033[32m' + "part 1.a.i: " + '\033[m' + str(db.part_1_a_i(conn)))
        print('\033[32m' + "part 1.a.ii: " + '\033[m' + str(db.part_1_a_ii(conn)))
    except Exception as e:
         print("Error in Part 1.a")
         print(e)

    try:
        print('\033[32m' + "Row count for Movies Table: " + '\033[m' + str(db.part_1_b_movies(conn,"data/movies.csv")))
        print('\033[32m' + "Row count for Movie Cast Table: " + '\033[m' + str(db.part_1_b_movie_cast(conn,"data/movie_cast.csv")))
    except Exception as e:
        print("Error in part 1.b")
        print(e)

    try:
        print('\033[32m' + "Row count for Cast Bio Table: " + '\033[m' + str(db.part_1_c(conn)))
    except Exception as e:
        print("Error in part 1.c")
        print(e)

    try:
        print('\033[32m' + "part 2.a: " + '\033[m' + db.part_2_a(conn))
        print('\033[32m' + "part 2.b: " + '\033[m' + db.part_2_b(conn))
        print('\033[32m' + "part 2.c: " + '\033[m' + db.part_2_c(conn))
    except Exception as e:
        print("Error in part 2")
        print(e)

    try:
        print('\033[32m' + "part 3: " + '\033[m' + str(db.part_3(conn)))
    except Exception as e:
        print("Error in part 3")
        print(e)

    try:
        print('\033[32m' + "part 4: " + '\033[m')
        for line in db.part_4(conn):
            print(line[0],line[1])
    except Exception as e:
        print("Error in part 4")
        print(e)

    try:
        print('\033[32m' + "part 5: " + '\033[m')
        for line in db.part_5(conn):
            print(line[0],line[1],line[2])
    except Exception as e:
        print("Error in part 5")
        print(e)

    try:
        print('\033[32m' + "part 6: " + '\033[m')
        for line in db.part_6(conn):
            print(line[0],line[1],line[2])
    except Exception as e:
        print("Error in part 6")
        print(e)
    
    try:
        print('\033[32m' + "part 7: " + '\033[m' + str(db.part_7(conn)))
        print("\033[32mRow count for good_collaboration view:\033[m", conn.execute("select count(*) from good_collaboration").fetchall()[0][0])
        print('\033[32m' + "part 8: " + '\033[m')
        for line in db.part_8(conn):
            print(line[0],line[1],line[2])
    except Exception as e:
        print("Error in part 7 and/or 8")
        print(e)

    try:   
        print('\033[32m' + "part 9.a: " + '\033[m'+ str(db.part_9_a(conn,"data/movie_overview.csv")))
        print('\033[32m' + "Count 9.b: " + '\033[m' + str(db.part_9_b(conn)))
        print('\033[32m' + "Count 9.c: " + '\033[m' + str(db.part_9_c(conn)))
    except Exception as e:
        print("Error in part 9")
        print(e)

    conn.close()
    #################################################################################
    #################################################################################
