<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Force-Directed Graph Visualization</title>
  <style>
    /* 
      Force-Directed Graph Visualization using D3.js
      ------------------------------------------------
      This project visualizes relationships between board games 
      using a force-directed graph. Node sizes and colors reflect 
      the degree of connections.
    */
    path.link {
      fill: none;
      stroke-width: 2px;
    }

    circle {
      stroke: black;
      stroke-width: 1.5px;
    }

    text {
      fill: #000;
      font: 12px sans-serif;
      pointer-events: none;
      font-weight: bold;
    }

    .pinned {
      fill: yellow !important;
    }
    
    .unpinned {
      fill: inherit !important;
    }
  </style>
</head>
<body>
  <svg width="1200" height="700"></svg>
  <script type="text/javascript" src="../lib/d3.v5.min.js"></script>
  <script>
    // Load CSV data and create the force-directed graph
    d3.dsv(",", "board_games.csv", d => ({
      source: d.source,
      target: d.target,
      value: +d.value
    })).then(data => {
      const links = data;
      const nodes = {};

      // Build nodes object and calculate degree for each node
      links.forEach(link => {
        link.source = nodes[link.source] || (nodes[link.source] = { name: link.source, degree: 0 });
        link.target = nodes[link.target] || (nodes[link.target] = { name: link.target, degree: 0 });
        nodes[link.source.name].degree++;
        nodes[link.target.name].degree++;
      });

      const width = 1200;
      const height = 700;

      // Scales for node color and size based on degree
      const colorScale = d3.scaleSequential(d3.interpolateBlues)
                           .domain(d3.extent(Object.values(nodes), d => d.degree));
      const sizeScale = d3.scaleLinear()
                          .domain(d3.extent(Object.values(nodes), d => d.degree))
                          .range([5, 20]);

      // Initialize force simulation with nodes and forces
      const simulation = d3.forceSimulation(Object.values(nodes))
                           .force("link", d3.forceLink(links).distance(100))
                           .force("center", d3.forceCenter(width / 2, height / 2))
                           .force("x", d3.forceX())
                           .force("y", d3.forceY())
                           .force("charge", d3.forceManyBody().strength(-250))
                           .on("tick", tick);

      const svg = d3.select("svg");

      // Draw links as paths
      const linkPaths = svg.append("g")
                           .selectAll("path")
                           .data(links)
                           .enter().append("path")
                           .attr("class", "link")
                           .style("stroke", d => d.value === 0 ? "gray" : "green")
                           .style("stroke-width", d => d.value === 0 ? 3 : 1)
                           .style("stroke-dasharray", d => d.value === 1 ? "5,5" : "");

      // Draw nodes as groups (for circle and text)
      const nodeGroup = svg.selectAll(".node")
                           .data(simulation.nodes())
                           .enter().append("g")
                           .attr("class", "node")
                           .call(d3.drag()
                             .on("start", dragstarted)
                             .on("drag", dragged)
                             .on("end", dragended))
                           .on("dblclick", unpinNode);

      // Append circles to nodes
      nodeGroup.append("circle")
               .attr("id", d => d.name.replace(/\s+/g, '').toLowerCase())
               .attr("r", d => sizeScale(d.degree))
               .style("fill", d => colorScale(d.degree));

      // Append text labels to nodes
      nodeGroup.append("text")
               .attr("x", 10)
               .attr("y", -10)
               .text(d => d.name);

      // Add a credit label
      svg.append("text")
         .attr("id", "credit")
         .attr("x", width - 100)
         .attr("y", 20)
         .text("rgandhi48");

      // Tick function to update positions of nodes and links
      function tick() {
        linkPaths.attr("d", d => {
          const dx = d.target.x - d.source.x,
                dy = d.target.y - d.source.y,
                dr = Math.sqrt(dx * dx + dy * dy) * 1.5;
          return `M${d.source.x},${d.source.y}A${dr},${dr} 0 0,1 ${d.target.x},${d.target.y}`;
        });
        nodeGroup.attr("transform", d => `translate(${d.x},${d.y})`);
      }

      // Drag event handlers
      function dragstarted(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
        d.pinned = true;
        d3.select(this).select("circle")
          .classed("pinned", true)
          .classed("unpinned", false);
      }

      function dragged(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
      }

      function dragended(d) {
        if (!d3.event.active) simulation.alphaTarget(0);
      }

      // Unpin node on double-click
      function unpinNode(d) {
        d.fx = null;
        d.fy = null;
        d.pinned = false;
        d3.select(this).select("circle")
          .classed("pinned", false)
          .classed("unpinned", true);
      }
    }).catch(console.error);
  </script>
</body>
</html>
